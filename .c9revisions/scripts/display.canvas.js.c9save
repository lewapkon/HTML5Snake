{"ts":1371062473889,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"snake.display = (function() {\n\tvar dom = snake.dom,\n\t\t$ = dom.$,\n\t\tcanvas, ctx,\n\t\tcols, rows,\n\t\tsnakeSize,\n\t\tfirstRun = true,\n\t\tboard,\n\t\tanimations = [],\n\t\ttimer;\n\tfunction createBackground() {\n\t\tvar background = document.createElement(\"canvas\"),\n\t\t\tbgctx = background.getContext(\"2d\");\n\t\tdom.addClass(background, \"background\");\n\t\tbackground.width = cols * snakeSize;\n\t\tbackground.height = rows * snakeSize;\n\t\tbgctx.fillStyle = \"rgba(225,235,255,0.15)\";\n\t\tbgctx.fillRect(0, 0, cols * snakeSize, rows * snakeSize);\n\t\treturn background;\n\t}\n\tfunction addAnimation(runTime, fncs) {\n        var anim = {\n            runTime : runTime,\n            startTime : Date.now(),\n            pos : 0,\n            fncs : fncs\n        };\n        animations.push(anim);\n    }\n\tfunction setup() {\n\t\tvar boardElement = $(\"#game-screen .game-board\")[0];\n\t\tcols = snake.settings.cols;\n\t\trows = snake.settings.rows;\n\t\tsnakeSize = snake.settings.snakeSize;\n\t\t\n\t\tcanvas = document.createElement(\"canvas\");\n\t\tctx = canvas.getContext(\"2d\");\n\t\tdom.addClass(canvas, \"board\");\n\t\tcanvas.width = cols * snakeSize;\n\t\tcanvas.height = rows * snakeSize;\n\t\tctx.scale(snakeSize, snakeSize);\n\t\t\n\t\tboardElement.appendChild(createBackground());\n\t\tboardElement.appendChild(canvas);\n\t\t\n\t\tpreviousCycle = Date.now();\n\t\tcycle();\n\t}\n\tfunction renderAnimations(time, lastTime) {\n        var anims = animations.slice(0), // Kopiuje listę.\n            n = anims.length,\n            animTime,\n            anim,\n            i;\n\n        // Wywołuje funkcję before(). \n        for (i=0;i<n;i++) {\n            anim = anims[i];\n            if (anim.fncs.before) {\n                anim.fncs.before(anim.pos);\n            }\n            anim.lastPos = anim.pos;\n            animTime = (lastTime - anim.startTime);\n            anim.pos = animTime / anim.runTime;\n            anim.pos = Math.max(0, Math.min(1, anim.pos));\n        }\n\n        animations = []; // Resetuje listę animacji.\n\n        for (i=0;i<n;i++) {\n            anim = anims[i];\n            anim.fncs.render(anim.pos, anim.pos - anim.lastPos);\n            if (anim.pos == 1) {\n                if (anim.fncs.done) {\n                    anim.fncs.done();\n                }\n            } else {\n                animations.push(anim);\n            }\n        }\n    }\n\tfunction cycle(time) {\n        renderAnimations(time, previousCycle);\n        previousCycle = time;\n        timer = setTimeout(cycle, 1000/30);\n    }\n\tfunction gameOver(callback) {\n        addAnimation(1000, {\n            render : function(pos) {\n                canvas.style.left =\n                    0.2 * pos * (Math.random() - 0.5) + \"em\";\n                canvas.style.top =\n                    0.2 * pos * (Math.random() - 0.5) + \"em\";\n            },\n            done : function() {\n                canvas.style.left = \"0\";\n                canvas.style.top = \"0\";\n                explode(callback);\n            }\n        });\n    }\n\tfunction explodePieces(pieces, pos, delta) {\n        var piece, i;\n        for (i = 0; i < pieces.length ; i++) {\n            piece = pieces[i];\n\n            piece.vel.y += 50 * delta;\n            piece.pos.y += piece.vel.y * delta;\n            piece.pos.x += piece.vel.x * delta;\n\n            if (piece.pos.x < 0 || piece.pos.x > cols) {\n                piece.pos.x = Math.max(0, piece.pos.x);\n                piece.pos.x = Math.min(cols, piece.pos.x);\n                piece.vel.x *= -1;\n            }\n\n            ctx.save();\n            ctx.globalCompositeOperation = \"lighter\";\n            ctx.translate(piece.pos.x, piece.pos.y);\n            ctx.rotate(piece.rot * pos * Math.PI * 4);\n            ctx.translate(-piece.pos.x, -piece.pos.y);\n            drawObject(piece.type,\n                piece.pos.x - 0.5,\n                piece.pos.y - 0.5,\n                1, piece.rotation\n            );\n            ctx.restore();\n        }\n    }\n\n    function explode(callback) {\n        var pieces = [],\n            piece,\n            x, y,\n            bonus = snake.board.getBonus(),\n            snakes = snake.board.getSnakes();\n        for (i = 0; i < snakes.length; i++) {\n                \tx = snakes[i].X;\n                \ty = snakes[i].Y;\n                \tpiece = {\n                   \t\ttype : board[x][y],\n                    \tpos : {\n                        \tx : x + 0.5,\n                        \ty : y + 0.5\n                    \t},\n                    \tvel : {\n                        \tx : (Math.random() - 0.5) * 20,\n                        \ty : -Math.random() * 10\n                    \t},\n                    \trot : (Math.random() - 0.5) * 3,\n                    \trotation : snakes[i].rot\n                \t}\n                pieces.push(piece);\n        }\n        \n\t\tpieces.push({\n\t\t\ttype : board[bonus.X][bonus.Y],\n\t\t\tpos : {\n\t\t\t\tx : bonus.X,\n\t\t\t\ty : bonus.Y\n\t\t\t},\n\t\t\tvel : {\n\t\t\t\tx : (Math.random() - 0.5) * 20,\n\t\t\t\ty : -Math.random() * 10\n\t\t\t},\n\t\t\trot : (Math.random() - 0.5) * 3,\n\t\t\trotation : 0\n\t\t});\n\t\t\n        addAnimation(3000, {\n            before : function(pos) {\n                ctx.clearRect(0,0,cols,rows);\n            },\n            render : function(pos, delta) {\n                explodePieces(pieces, pos, delta);\n            },\n            done : callback\n        });\n    }\n\tfunction initialize(callback) {\n\t\tif (firstRun) {\n\t\t\tsetup();\n\t\t\tfirstRun = false;\n\t\t}\n\t\tcallback();\n\t}\n\tfunction drawObject(type, x, y, scale, rot) {\n\t\tvar image = snake.images[\"images/images\" + snakeSize + \".png\"];\n\t\tctx.save();\n\t\tif (type == 6) return;\n\t\tif (typeof scale !== \"undefined\" && scale > 0) {\n\t\t\tctx.beginPath();\n\t\t\tctx.rect(x, y, 1, 1);\n\t\t\tctx.clip();\n\t\t\tctx.translate(x + 0.5, y + 0.5);\n\t\t\tctx.scale(scale, scale);\n\t\t\tif (rot) {\n\t\t\t\tctx.rotate(rot);\n\t\t\t}\n\t\t\tctx.translate(-x - 0.5, -y - 0.5);\n\t\t}\n\t\tctx.drawImage(image, type * snakeSize, 0, snakeSize, snakeSize, x, y, 1, 1);\n\t\tctx.restore();\n\t}\n\tfunction redraw(newBoard, snakes) {\n\t\tvar x, y, field;\n\t\tboard = newBoard;\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\tdrawObject(board[snakes[0].X][snakes[0].Y], snakes[0].X, snakes[0].Y, 1, snakes[0].rot * Math.PI / 2);\n\t\tfor (var i = 1; i < snakes.length; i++) {\n\t\t\tx = snakes[i].X;\n\t\t\ty = snakes[i].Y;\n\t\t\tdrawObject(board[x][y], x, y, 1, snakes[i].rot * Math.PI / 2);\n\t\t}\n\t\tfor (x = 0; x < cols; x++) {\n\t\t\tfor (y = 0; y < rows; y++) {\n\t\t\t\tfield = board[x][y];\n\t\t\t\tif (field == 4 || field == 5) {\n\t\t\t\t\tdrawObject(field, x, y, 1, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tinitialize : initialize,\n\t\tredraw : redraw,\n\t\tgameOver : gameOver\n\t};\n})();\n"]],"start1":0,"start2":0,"length1":0,"length2":6470}]],"length":6470}
{"contributors":[],"silentsave":true,"ts":1371062501264,"patch":[[{"diffs":[[0,"ow();\n\t\t"],[1,"window."],[0,"cycle();"]],"start1":1268,"start2":1268,"length1":16,"length2":23}]],"length":6477,"saved":false}
{"ts":1371062504142,"patch":[[{"diffs":[[0,"\twindow."],[1,"req"],[0,"cycle();"]],"start1":1275,"start2":1275,"length1":16,"length2":19}]],"length":6480,"saved":false}
{"ts":1371062507399,"patch":[[{"diffs":[[0,"ndow.req"],[1,"uestAnimation"],[0,"cycle();"]],"start1":1278,"start2":1278,"length1":16,"length2":29}]],"length":6493,"saved":false}
{"ts":1371062509663,"patch":[[{"diffs":[[0,"nimation"],[1,"Frame("],[0,"cycle();"]],"start1":1291,"start2":1291,"length1":16,"length2":22}]],"length":6499,"saved":false}
{"ts":1371062510293,"patch":[[{"diffs":[[0,"me(cycle"],[-1,"()"],[0,";\n\t}\n\tfu"]],"start1":1302,"start2":1302,"length1":18,"length2":16}]],"length":6497,"saved":false}
{"ts":1371062512457,"patch":[[{"diffs":[[0,"me(cycle"],[1,")"],[0,";\n\t}\n\tfu"]],"start1":1302,"start2":1302,"length1":16,"length2":17}]],"length":6498,"saved":false}
{"ts":1371062525652,"patch":[[{"diffs":[[0,"        "],[1,"//"],[0,"timer = "]],"start1":2397,"start2":2397,"length1":16,"length2":18}]],"length":6500,"saved":false}
{"ts":1371062527411,"patch":[[{"diffs":[[0,"cle = time;\n"],[1,"        window.requestAnimationFrame(cycle);\n"],[0,"        //ti"]],"start1":2385,"start2":2385,"length1":24,"length2":69}]],"length":6545,"saved":false}
{"contributors":[],"silentsave":false,"ts":1371245656680,"patch":[[{"diffs":[[0,"getContext(\"2d\")"],[1,",\n\t\t\timage = snake.images[\"images/tlo\" + snakeSize + \".png\"]"],[0,";\n"],[-1,""],[0,"\t\tdom.addClass(b"]],"start1":269,"start2":269,"length1":34,"length2":94},{"diffs":[[0,"nakeSize;\n\t\t"],[1,"//"],[0,"bgctx.fillSt"]],"start1":458,"start2":458,"length1":24,"length2":26},{"diffs":[[0,"15)\";\n\t\t"],[1,"//"],[0,"bgctx.fi"]],"start1":510,"start2":510,"length1":16,"length2":18},{"diffs":[[0,"eSize);\n"],[1,"\t\t\n\t\tfor (var x = 0; x < cols; x++) {\n\t\t\tfor (var y = 0; y < rows; y++) {\n\t\t\t\tbgctx.drawImage(image, x * snakeSize, y * snakeSize, snakeSize, snakeSize);\n\t\t\t}\n\t\t}\n"],[0,"\t\treturn"]],"start1":570,"start2":570,"length1":16,"length2":179},{"diffs":[[0,"            "],[1,"//"],[0,"ctx.globalCo"]],"start1":3737,"start2":3737,"length1":24,"length2":26},{"diffs":[[0,");\n        for ("],[1,"var "],[0,"i = 0; i < snake"]],"start1":4336,"start2":4336,"length1":32,"length2":36},{"diffs":[[0,"\n\t\t}\n\t}\n"],[1,"\tfunction moveSnake(objects, pos) {\n\t\tvar fromX, fromY, toX, toY,\n\t\t\tdestX, destY;\n\t\tfor (var i = 0; i < objects.length; i++) {\n\t\t\tfromX = objects[i].from.x;\n\t\t\tfromY = objects[i].from.y;\n\t\t\ttoX = objects[i].to.x;\n\t\t\ttoY = objects[i].to.y;\n\t\t\tif (objects[i].type != 1 && objects[i].type != 2) {\n\t\t\t\tdrawObject(objects[i].type, fromX + ((toX - fromX) * pos),\n\t\t\t\t\t\t\t  fromY + ((toY - fromY) * pos),\n\t\t\t\t\t\t\t  1, objects[i].rot\n\t\t\t);\n\t\t\t} else {\n\t\t\t\tvar difference = 1, helper;\n\t\t\t\tif (toX != fromX) {\n\t\t\t\t\tif (toX < fromX) {\n\t\t\t\t\t\tdestX = toX + difference;\n\t\t\t\t\t\thelper = 3;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdestX = toX - difference;\n\t\t\t\t\t\thelper = 1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdestX = toX;\n\t\t\t\t}\n\t\t\t\tif (toY != fromY) {\n\t\t\t\t\tif (toY < fromY) {\n\t\t\t\t\t\tdestY = toY + difference;\n\t\t\t\t\t\thelper = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdestY = toY - difference;\n\t\t\t\t\t\thelper = 2;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdestY = toY;\n\t\t\t\t}\n    \t\t\tif (i == objects.length - 2) {\n\t\t\t    \tdrawObject(0, destX, destY, 1, objects[i].rot);\n\t\t\t\t    drawObject(objects[i].type, toX, toY, 1, objects[i].rot);\n\t\t\t\t\tif (helper == 0) {\n\t\t\t\t\t\tctx.clearRect(destX, destY + 1 - pos, 1, destY + 1);\n\t\t\t\t\t} else if (helper == 1) {\n\t\t\t\t\t\tctx.clearRect(destX, destY, pos, 1);\n\t\t\t\t\t} else if (helper == 2) {\n\t\t\t\t\t\tctx.clearRect(destX, destY, 1, pos);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.clearRect(destX + 1 - pos, destY, destX + 1, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t}\n\tfunction animateSnake(newBoard, snakes, popped) {\n\t\tvar objects = [], current,\n\t\t\tbonus = snake.board.getBonus();\n\t\tboard = newBoard;\n\t\t\n\t\tfor (var i = 0; i < snakes.length - 1; i++) {\n\t\t\tcurrent = {\n\t\t\t\tfrom : {\n\t\t\t\t\tx : snakes[i + 1].X,\n\t\t\t\t\ty : snakes[i + 1].Y\n\t\t\t\t},\n\t\t\t\tto : {\n\t\t\t\t\tx : snakes[i].X,\n\t\t\t\t\ty : snakes[i].Y\n\t\t\t\t},\n\t\t\t\ttype : board[snakes[i].X][snakes[i].Y],\n\t\t\t\trot : snakes[i].rot * Math.PI / 2\n\t\t\t};\n\t\t\t\tobjects.push(current);\n\t\t}\n\t\t\n\t\taddAnimation(200, {\n            before : function(pos) {\n                ctx.clearRect(0, 0, cols, rows);\n            },\n            render : function(pos) {\n                drawObject(bonus.type, bonus.X, bonus.Y, 1, 0);\n                moveSnake(objects, pos);\n            }\n        });\n\t}\n"],[0,"\treturn "]],"start1":6682,"start2":6682,"length1":16,"length2":2142},{"diffs":[[0,"redraw,\n"],[-1,""],[0,"\t\tgameOv"]],"start1":8864,"start2":8864,"length1":16,"length2":16},{"diffs":[[0,"gameOver"],[1,",\n\t\tanimateSnake : animateSnake"],[0,"\n\t};\n})("]],"start1":8885,"start2":8885,"length1":16,"length2":47}]],"length":8935,"saved":false}
{"ts":1371245998521,"patch":[[{"diffs":[[0,");\n\t\t\t} else"],[1," if (i == objects.length - 2)"],[0," {\n"],[-1,""],[0,"\t\t\t\tvar diff"]],"start1":7118,"start2":7118,"length1":27,"length2":56},{"diffs":[[0,"\t\t}\n"],[-1,"    \t\t\tif (i == objects.length - 2) {\n"],[0,"\t\t\t "]],"start1":7602,"start2":7602,"length1":46,"length2":8},{"diffs":[[0,"ot);\n\t\t\t"],[-1,"\t    "],[1,"}\n\t\t\t"],[0,"drawObje"]],"start1":7657,"start2":7657,"length1":21,"length2":21},{"diffs":[[0,"].rot);\n"],[-1,"\t"],[1,"            if (i == objects.length - 2) {\n"],[0,"\t\t\t\tif ("]],"start1":7720,"start2":7720,"length1":17,"length2":59},{"diffs":[[0,"per == 0) {\n"],[-1,"\t"],[0,"\t\t\t\t\tctx.cle"]],"start1":7782,"start2":7782,"length1":25,"length2":24},{"diffs":[[0,"destY + 1);\n"],[-1,"\t"],[0,"\t\t\t\t} else i"]],"start1":7840,"start2":7840,"length1":25,"length2":24},{"diffs":[[0,"er == 1) {\n\t\t\t\t\t"],[-1,"\t"],[0,"ctx.clearRect(de"]],"start1":7871,"start2":7871,"length1":33,"length2":32},{"diffs":[[0,"Y, pos, 1);\n"],[-1,"\t"],[0,"\t\t\t\t} else i"]],"start1":7912,"start2":7912,"length1":25,"length2":24},{"diffs":[[0,"er == 2) {\n\t\t\t\t\t"],[-1,"\t"],[0,"ctx.clearRect(de"]],"start1":7943,"start2":7943,"length1":33,"length2":32},{"diffs":[[0,", pos);\n"],[-1,"\t"],[0,"\t\t\t\t} el"]],"start1":7988,"start2":7988,"length1":17,"length2":16},{"diffs":[[0,"else {\n\t\t\t\t\t"],[-1,"\t"],[0,"ctx.clearRec"]],"start1":8002,"start2":8002,"length1":25,"length2":24},{"diffs":[[0,"1);\n"],[-1,"\t\t\t\t\t}\n"],[0,"\t\t\t\t}\n"],[1,""],[0,"\t\t\t}"],[-1,"\t"],[0,"\n\t\t}"]],"start1":8063,"start2":8063,"length1":26,"length2":18}]],"length":8953,"saved":false}
