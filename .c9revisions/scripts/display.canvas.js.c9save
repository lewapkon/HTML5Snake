{"ts":1370790561803,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"snake.display = (function() {\n\tvar dom = snake.dom,\n\t\t$ = dom.$,\n\t\tcanvas, ctx,\n\t\tcols, rows,\n\t\tsnakeSize,\n\t\tfirstRun = true,\n\t\tboard,\n\t\tanimations = [];\n\tfunction createBackground() {\n\t\tvar background = document.createElement(\"canvas\"),\n\t\t\tbgctx = background.getContext(\"2d\");\n\t\tdom.addClass(background, \"background\");\n\t\tbackground.width = cols * snakeSize;\n\t\tbackground.height = rows * snakeSize;\n\t\tbgctx.fillStyle = \"rgba(225,235,255,0.15)\";\n\t\tbgctx.fillRect(0, 0, cols * snakeSize, rows * snakeSize);\n\t\treturn background;\n\t}\n\tfunction addAnimation(runTime, fncs) {\n\t\tvar anim = {\n\t\t\trunTime : runTime,\n\t\t\tstartTime : Date.now(),\n\t\t\tpos : 0,\n\t\t\tfncs : fncs\n\t\t}\n\t\tanimations.push(anim);\n\t}\n\tfunction setup() {\n\t\tvar boardElement = $(\"#game-screen .game-board\")[0];\n\t\tcols = snake.settings.cols;\n\t\trows = snake.settings.rows;\n\t\tsnakeSize = snake.settings.snakeSize;\n\t\t\n\t\tcanvas = document.createElement(\"canvas\");\n\t\tctx = canvas.getContext(\"2d\");\n\t\tdom.addClass(canvas, \"board\");\n\t\tcanvas.width = cols * snakeSize;\n\t\tcanvas.height = rows * snakeSize;\n\t\t//ctx.scale(snakeSize, snakeSize);\n\t\t\n\t\tboardElement.appendChild(createBackground());\n\t\tboardElement.appendChild(canvas);\n\t\t\n\t\tpreviousCycle = Date.now();\n\t\trequestAnimationFrame(cycle);\n\t}\n\tfunction renderAnimations(time, lastTime) {\n\t\tvar anims = animations.slice(0),\n\t\t\tn = anims.length,\n\t\t\tanimTime,\n\t\t\tanim,\n\t\t\ti;\n\t\tfor (i = 0; i < n; i++) {\n\t\t\tanim = anims[i];\n\t\t\tif (anim.fncs.before) {\n\t\t\t\tanim.fncs.before(anim.pos);\n\t\t\t}\n\t\t\tanim.lastPos = anim.pos;\n\t\t\tanimTime = (lastTime - anim.startTime);\n\t\t\tanim.pos = animTime / anim.runTime;\n\t\t\tanim.pos = Math.max(0, Math.min(1, anim.pos));\n\t\t}\n\t\tanimations = [];\n\t\tfor (i = 0; i < n; i++) {\n\t\t\tanim = anims[i];\n\t\t\tanim.fncs.render(anim.pos, anim.pos - anim.lastPos);\n\t\t\tif (anim.pos == 1) {\n\t\t\t\tif (anim.fncs.done) {\n\t\t\t\t\tanim.fncs.done();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tanimations.push(anim);\n\t\t\t}\n\t\t}\n\t}\n\tfunction cycle(time) {\n\t\trenderAnimations(time, previousCycle);\n\t\tpreviousCycle = time;\n\t\trequestAnimationFrame(cycle);\n\t}\n\tfunction gameOver(callback) {\n\t\taddAnimation(1000, {\n\t\t\trender : function(pos) {\n\t\t\t\tcanvas.style.left = 0.2 * pos * (Math.random() - 0.5) + \"em\";\n\t\t\t\tcanvas.style.top = 0.2 * pos * (Math.random() - 0.5) + \"em\";\n\t\t\t},\n\t\t\tdone : function() {\n\t\t\t\tcanvas.style.left = \"0\";\n\t\t\t\tcanvas.style.top = \"0\";\n\t\t\t\texplode(callback);\n\t\t\t}\n\t\t});\n\t}\n\tfunction explodePieces(pieces, pos, delta) {\n\t\tvar piece, i;\n\t\tfor (i = 0; i < piec.length; i++) {\n\t\t\tpiece = pieces[i];\n\t\t\t\n\t\t\tpiece.vel.y += 50 * delta;\n\t\t\tpiece.pos.y += piece.vel.y * delta;\n\t\t\tpiece.pos.x += piece.vel.x * delta;\n\t\t\t\n\t\t\tif (piece.pos.x < 0 || piece.pos.x > cols) {\n\t\t\t\tpiece.pos.x = Math.max(0, piece.pos.x);\n\t\t\t\tpiece.pos.x = Math.min(cols, piece.pos.x);\n\t\t\t\tpiece.vel.x *= -1;\n\t\t\t}\n\t\t\t\n\t\t\tctx.save();\n\t\t\tctx.globalCompositeOperation = \"lighter\";\n\t\t\tctx.translate(piece.pos.x, piece.pos.y);\n\t\t\tctx.rotate(piece.rot * pos * Math.PI *4);\n\t\t\tctx.translate(-piece.pos.x, -piece.pos.y);\n\t\t\tdrawObject(piece.type,\n\t\t\t\tpiece.pos.x - 0.5,\n\t\t\t\tpiece.pos.y - 0.5\n\t\t\t);\n\t\t\tctx.restore();\n\t\t}\n\t}\n\tfunction explode(callback) {\n\t\tvar pieces = [],\n\t\t\tpiece,\n\t\t\tx, y;\n\t\tfor (x = 0; x < cols; x++) {\n\t\t\tfor (y = 0; y < rows; y++) {\n\t\t\t\tpiece = {\n\t\t\t\t\ttype : board[x][y],\n\t\t\t\t\tpos : {\n\t\t\t\t\t\tx : x + 0.5,\n\t\t\t\t\t\ty : y + 0.5\n\t\t\t\t\t},\n\t\t\t\t\tvel : {\n\t\t\t\t\t\tx : (Math.random() - 0.5) * 20,\n\t\t\t\t\t\ty : -Math.random() * 10\n\t\t\t\t\t},\n\t\t\t\t\trot : (Math.random() - 0.5) * 3\n\t\t\t\t}\n\t\t\t\tpieces.push(piece);\n\t\t\t}\n\t\t}\n\t\t\n\t\taddAnimation(2000, {\n\t\t\tbefore : function(pos) {\n\t\t\t\tctx.clearRect(0, 0, cols, rows);\n\t\t\t},\n\t\t\trender : function(pos, delta) {\n\t\t\t\texplodePieces(pieces, pos, delta);\n\t\t\t},\n\t\t\tdone : callback\n\t\t});\n\t}\n\tfunction initialize(callback) {\n\t\tif (firstRun) {\n\t\t\tsetup();\n\t\t\tfirstRun = false;\n\t\t}\n\t\tcallback();\n\t}\n\tfunction drawObject(type, x, y) {\n\t\tif (type == -1) return;\n\t\tvar image = snake.images[\"images/images\" + snakeSize + \".png\"];\n\t\tctx.drawImage(image, type * snakeSize, 0, snakeSize, snakeSize, x * snakeSize, y * snakeSize, snakeSize, snakeSize);\n\t}\n\tfunction redraw(newBoard, callback) {\n\t\tvar x, y;\n\t\tboard = newBoard;\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\tfor (x = 0; x < cols; x++) {\n\t\t\tfor (y = 0; y < rows; y++) {\n\t\t\t\tdrawObject(board[x][y] - 1, x, y);\n\t\t\t}\n\t\t}\n\t\tcallback();\n\t}\n\treturn {\n\t\tinitialize : initialize,\n\t\tredraw : redraw,\n\t\tgameOver : gameOver\n\t};\n})();\n"]],"start1":0,"start2":0,"length1":0,"length2":4359}]],"length":4359}
