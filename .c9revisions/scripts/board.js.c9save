{"ts":1370790560717,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"snake.board = (function() {\n\tvar settings,\n\t\tcols,\n\t\trows,\n\t\tbaseScore,\n\t\trotation,\n\t\trotated = false,\n\t\tstartX,\tstartY,\n\t\tendX, endY,\n\t\tbonusX, bonusY,\n\t\tboard, snakes,\n\t\tscore,\n\t\tdisplay = snake.display,\n\t\ttime = 0, counter = 0,\n\t\t$ = snake.dom.$;\n\t\n\t/* funkcje gry */\n\tfunction initialize(callback) {\n\t\tsettings = snake.settings;\n\t\tbaseScore = settings.baseScore;\n\t\tcols = settings.cols;\n\t\trows = settings.rows;\n\t\t\n\t\tgenerateSnake();\n\t\tcallback();\n\t}\n\tfunction changeTime() {\n\t\ttime++;\n\t\tvar minutes = 0,\n\t\t\tseconds = 0;\n\t\tminutes = Math.floor(time / 60);\n\t\tseconds = time % 60;\n\t\tif (seconds < 10) {\n\t\t\tseconds = 0 + \"\" + seconds;\n\t\t}\n\t\t$(\"#game-screen .time span\")[0].innerHTML = minutes + \":\" + seconds;\n\t}\n\tfunction generateSnake() {\n\t\tstartX = Math.floor(cols/2);\n\t\tstartY = Math.floor(rows/2);\n\t\tendX = startX;\n\t\tendY = startY;\n\t\trotation = Math.floor(Math.random()*4);\n\t\tscore = 0;\n\t\tsnakes = [];\n\t\tboard = [];\n\t\t\n\t\tfor (var x = 0; x < cols; x++) {\n\t\t\tboard[x] = [];\n\t\t\tfor (var y = 0; y < rows; y++) {\n\t\t\t\tboard[x][y] = 0;\n\t\t\t}\n\t\t}\n\t\tsnakes.push({X : startX, Y : startY});\n\t\tboard[snakes[0].X][snakes[0].Y] = 1;\n\t\trndBonus();\n\t}\n\tfunction rndBonus() {\n\t\tdo {\n\t\t\tbonusX = Math.floor(Math.random() * cols);\n\t\t\tbonusY = Math.floor(Math.random() * rows);\n\t\t} while (!(board[bonusX][bonusY] == 0));\n\t\t\n\t\tboard[bonusX][bonusY] = 2;\n\t}\n\tfunction checkBonus(x, y) {\n\t\tif (getField(x, y) == 2) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tfunction getField(x, y) {\n\t\tif (x < 0 || x > cols - 1 || y < 0 || y > rows - 1) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn board[x][y];\n\t\t}\n\t}\n\tfunction checkField(x, y) {\n\t\tif (getField(x, y) == 0 || getField(x, y) == 2) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tfunction goHelper(x, y) {\n\t\tif (checkField(x, y)) {\n\t\t\tif (checkBonus(x, y)) {\n\t\t\t\tscore += baseScore;\n\t\t\t\t$(\"#game-screen .score span\")[0].innerHTML = score;\n\t\t\t\t//bonuses.push({X : x, Y : y});\n\t\t\t\trndBonus();\n\t\t\t\treturn 2;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\tfunction go() {\n\t\tvar helper;\n\t\trotated = false;\n\t\tswitch (rotation) {\n\t\t\tcase 0:\n\t\t\t\thelper = goHelper(startX, startY - 1);\n\t\t\t\tif (helper > 0) {\n\t\t\t\t\tsnakes.unshift({X : startX, Y : --startY});\n\t\t\t\t\tboard[snakes[0].X][snakes[0].Y] = 1;\n\t\t\t\t\tif (helper == 1) {\n\t\t\t\t\t\tboard[snakes[snakes.length - 1].X][snakes[snakes.length - 1].Y] = 0;\n\t\t\t\t\t\tsnakes.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\thelper = goHelper(startX + 1, startY);\n\t\t\t\tif (helper > 0) {\n\t\t\t\t\tsnakes.unshift({X : ++startX, Y : startY});\n\t\t\t\t\tboard[snakes[0].X][snakes[0].Y] = 1;\n\t\t\t\t\tif (helper == 1) {\n\t\t\t\t\t\tboard[snakes[snakes.length - 1].X][snakes[snakes.length - 1].Y] = 0;\n\t\t\t\t\t\tsnakes.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\thelper = goHelper(startX, startY + 1);\n\t\t\t\tif (helper > 0) {\n\t\t\t\t\tsnakes.unshift({X : startX, Y : ++startY});\n\t\t\t\t\tboard[snakes[0].X][snakes[0].Y] = 1;\n\t\t\t\t\tif (helper == 1) {\n\t\t\t\t\t\tboard[snakes[snakes.length - 1].X][snakes[snakes.length - 1].Y] = 0;\n\t\t\t\t\t\tsnakes.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\thelper = goHelper(startX - 1, startY);\n\t\t\t\tif (helper > 0) {\n\t\t\t\t\tsnakes.unshift({X : --startX, Y : startY});\n\t\t\t\t\tboard[snakes[0].X][snakes[0].Y] = 1;\n\t\t\t\t\tif (helper == 1) {\n\t\t\t\t\t\tboard[snakes[snakes.length - 1].X][snakes[snakes.length - 1].Y] = 0;\n\t\t\t\t\t\tsnakes.pop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tif (helper == 0) {\n\t\t\tsnake.screens[\"game-screen\"].gameOver();\n\t\t\treturn;\n\t\t}\n\t\tprint();\n\t\tsnake.display.redraw(getBoard(), function(){});\n\t\tif (++counter == 5) {\n\t\t\tcounter = 0;\n\t\t\tchangeTime();\n\t\t}\n\t}\n\tfunction turnLeft() {\n\t\tif (!rotated) {\n\t\t\tif (--rotation < 0)\trotation = 3;\n\t\t\trotated = true;\n\t\t}\n\t}\n\tfunction turnRight() {\n\t\tif (!rotated) {\n\t\t\tif (++rotation > 3)\trotation = 0;\n\t\t\trotated = true;\n\t\t}\n\t}\n\tfunction print() {\n\t\tvar str = \"\";\n\t\tfor (var y = 0; y < rows; y++) {\n\t\t\tfor (var x = 0; x < cols; x++) {\n\t\t\t\tstr += getField(x, y) + \" \";\n\t\t\t}\n\t\t\tstr += \"\\r\\n\";\n\t\t}\n\t\tconsole.log(str);\n\t\tconsole.log(\"Score: \" + score);\n\t}\n\tfunction getBoard() {\n\t\treturn board;\n\t}\n\treturn {\n\t\tinitialize : initialize,\n\t\tgo : go,\n\t\tturnLeft : turnLeft,\n\t\tturnRight : turnRight,\n\t\tprint : print,\n\t\tgetBoard : getBoard\n\t};\n})();\n"]],"start1":0,"start2":0,"length1":0,"length2":4125}]],"length":4125}
